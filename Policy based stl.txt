
//------- Necessary part--------------

#include <ext/pb_ds/assoc_container.hpp>

#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;



// ------------less than equal(works as MULTISET )---------------
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set; 



// ------------less than(WORKS AS SET)---------------
typedef tree<int, null_type, less<int>,       rb_tree_tag, tree_order_statistics_node_update> ordered_set;






//----------------------functions--------------
ordered_set X;


X.insert(44);  //insert 44 into set
X.erase(44);	//delete 44 into set

X.order_of_key(k)              // the number of elements in the s less than k

*X.find_by_order(k)            // print the 0-th smallest number in s(0-based)   (X.find_by_order(k)  returns iterator )

*A.upper_bound(X);     //print netx greater element of X



























	

	
