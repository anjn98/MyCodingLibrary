ll mulmod(ll a,ll b,ll m)
{
    ll res=0; a%=m;
    while(b) {
        if(b&1) res=(res+a)%m;
        a=(2LL*a)%m;b>>=1LL;
    } 
    return res;
}
ll powmod(ll a,ll b,ll m)
{
    ll res=1;
    a%=m;
    while(b)
    {
        if(b&1)res=mulmod(res,a,m);
        a=mulmod(a,a,m);    b>>=1LL;
    }
    return res;
}
bool check_comp(ll n,ll a,ll d,ll s)
{
    ll x=powmod(a,d,n);
    if(x==1 || x==n-1) return 0;
    for(int i=1;i<s;i++)
    {
        x=mulmod(x,x,n);
        if(x==n-1) return 0;
    }
    return 1;
}

bool millerrabin(ll n)
{
    if(n<4) return n==2||n==3;
    ll s=0,d=n-1;

    while(d%2==0) s++,d>>=1LL;  //We have to represent the number in the form n-1 = (2^s . d)

    vector<ll> primes={2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};  // for 10^9 only 2,3,5,7 is enough
    for(ll a:primes)
    {
        if(n==a) return 1;
        if(check_comp(n,a,d,s))
            return 0;
    }
    return 1;
}

